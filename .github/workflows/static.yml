<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Gestor de Estoque - Loja Elétrica</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary: #ff8800;
      --secondary: #333;
      --bg: #f9f9f9;
      --surface: #fff;
      --accent: #e67600;
      --error: #cc3300;
      --font: 'Segoe UI', sans-serif;
      --radius: 6px;
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      font-family: var(--font);
      background: var(--bg);
      color: var(--secondary);
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    header {
      background: var(--primary);
      color: var(--surface);
      padding: 0.5rem 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-left {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    .header-left img {
      height: 50px;
    }
    .header-title {
      font-size: 1.5rem;
      font-weight: bold;
    }
    .container {
      flex: 1;
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 1rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    .panels-wrapper {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 1rem;
    }
    .panel {
      background: var(--surface);
      border-radius: var(--radius);
      padding: 1rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    .panel h2 {
      margin-bottom: 0.5rem;
      color: var(--primary);
      font-size: 1.2rem;
    }
    .toolbar {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      margin-bottom: 0.5rem;
    }
    .toolbar button,
    .toolbar label {
      background: var(--primary);
      color: var(--surface);
      padding: 0.5rem 1rem;
      border-radius: var(--radius);
      cursor: pointer;
      transition: background 0.2s;
      text-decoration: none;
      border: none;
      user-select: none;
    }
    .toolbar button:hover,
    .toolbar label:hover {
      background: var(--accent);
    }
    .toolbar input[type="file"] {
      display: none;
    }
    #productForm {
      display: grid;
      gap: 0.5rem;
    }
    #productForm input,
    #productForm select,
    #productForm button {
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: var(--radius);
      font-size: 0.9rem;
    }
    #productForm button {
      background: var(--primary);
      color: var(--surface);
      border: none;
      cursor: pointer;
      transition: background 0.2s;
    }
    #productForm button:hover {
      background: var(--accent);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 0.5rem;
      overflow-x: auto;
    }
    th,
    td {
      padding: 0.5rem;
      border: 1px solid #eee;
      text-align: center;
    }
    th {
      background: var(--bg);
      cursor: pointer;
      user-select: none;
    }
    tr.low-stock {
      background: #fff3cd;
    }
    .log {
      background: var(--surface);
      border: 1px solid #eee;
      height: 140px;
      overflow-y: auto;
      padding: 0.5rem;
      margin-top: 0.5rem;
      font-size: 0.85rem;
      font-family: monospace;
      white-space: pre-wrap;
    }
    canvas {
      max-width: 100%;
      height: 200px;
      margin-top: 0.5rem;
    }
    @media (max-width: 800px) {
      .panels-wrapper {
        grid-template-columns: 1fr;
      }
      header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="header-left">
      <img
        src="https://ik.imagekit.io/hocwz3xpvv/GARTRAN.jpg?updatedAt=1754388849268"
        alt="Logo GARTRAN"
      />
      <div class="header-title">Gestor de Estoque - Loja Elétrica</div>
    </div>
  </header>
  <div class="container">
    <div class="panels-wrapper">
      <div class="panel">
        <h2>Ferramentas</h2>
        <div class="toolbar">
          <button id="simulateBtn">Simular Venda</button>
          <button id="exportBtn">Exportar CSV</button>
          <label for="importFile">Importar CSV</label>
          <input type="file" id="importFile" accept=".csv" />
          <button id="clearBtn">Limpar Dados</button>
        </div>
        <div id="productForm">
          <input
            type="text"
            id="name"
            placeholder="Nome do Produto"
            autocomplete="off"
          />
          <select id="category">
            <option value="">Categoria</option>
            <option>Iluminação</option>
            <option>Cabos</option>
            <option>Ferramentas</option>
            <option>Automação</option>
            <option>Componentes</option>
          </select>
          <input
            type="number"
            id="quantity"
            placeholder="Quantidade"
            min="0"
            autocomplete="off"
          />
          <input
            type="number"
            id="demand"
            placeholder="Demanda (%)"
            min="0"
            max="100"
            autocomplete="off"
          />
          <input
            type="text"
            id="image"
            placeholder="URL da Imagem"
            autocomplete="off"
          />
          <button id="addBtn">Adicionar</button>
          <button id="cancelBtn" style="display:none; background:#6c757d">
            Cancelar
          </button>
        </div>
        <div class="log" id="log"></div>
      </div>
      <div class="panel">
        <h2>Estoque &amp; Ranking</h2>
        <input
          type="text"
          id="search"
          placeholder="Buscar..."
          style="width: 100%; padding: 0.5rem; margin-bottom: 0.5rem"
          autocomplete="off"
        />
        <div style="overflow-x: auto">
          <table>
            <thead>
              <tr>
                <th data-col="image">Imagem</th>
                <th data-col="name">Nome</th>
                <th data-col="category">Categoria</th>
                <th data-col="quantity">Qtd</th>
                <th data-col="demand">Demanda</th>
                <th data-col="sold">Vendidos</th>
                <th>Status</th>
                <th>Ações</th>
              </tr>
            </thead>
            <tbody id="tableBody"></tbody>
          </table>
        </div>
        <h2>Ranking de Vendas</h2>
        <ol id="ranking"></ol>
      </div>
    </div>
    <div class="panel">
      <h2>Gráfico de Vendas</h2>
      <canvas id="chart"></canvas>
    </div>
  </div>

<script>
  const nameInput = document.getElementById('name');
  const categoryInput = document.getElementById('category');
  const quantityInput = document.getElementById('quantity');
  const demandInput = document.getElementById('demand');
  const imageInput = document.getElementById('image');
  const addBtn = document.getElementById('addBtn');
  const cancelBtn = document.getElementById('cancelBtn');
  const simulateBtn = document.getElementById('simulateBtn');
  const exportBtn = document.getElementById('exportBtn');
  const importFile = document.getElementById('importFile');
  const clearBtn = document.getElementById('clearBtn');
  const searchInput = document.getElementById('search');
  const tableBody = document.getElementById('tableBody');
  const rankingEl = document.getElementById('ranking');
  const logDiv = document.getElementById('log');
  const chartCtx = document.getElementById('chart').getContext('2d');

  let products = [];
  let history = {};
  let editIndex = -1;
  let chart;
  let sortCol = null, sortDir = 1;

  // Helpers
  function log(msg) {
    logDiv.innerHTML = `[${new Date().toLocaleTimeString()}] ${msg}\n` + logDiv.innerHTML;
  }

  async function fetchProducts() {
    const res = await fetch('/products');
    if (res.ok) {
      const data = await res.json();
      products = data.products;
      history = data.history || {};
    } else {
      log('Erro ao buscar produtos.');
    }
  }

  async function saveProduct(product, index = -1) {
    const url = index >= 0 ? `/products/${encodeURIComponent(products[index].name)}` : '/products';
    const method = index >= 0 ? 'PUT' : 'POST';
    const res = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(product)
    });
    if (res.ok) {
      await fetchProducts();
      renderAll();
      log(index >= 0 ? `Produto editado: ${product.name}` : `Produto adicionado: ${product.name}`);
    } else {
      const err = await res.json();
      alert(err.error || 'Erro ao salvar produto');
    }
  }

  async function deleteProduct(name) {
    if (!confirm(`Confirma a exclusão do produto "${name}"?`)) return;
    const res = await fetch(`/products/${encodeURIComponent(name)}`, { method: 'DELETE' });
    if (res.ok) {
      await fetchProducts();
      renderAll();
      log(`Produto excluído: ${name}`);
    } else {
      alert('Erro ao excluir produto.');
    }
  }

  async function simulateSales() {
    const res = await fetch('/simulate', { method: 'POST' });
    if (res.ok) {
      await fetchProducts();
      renderAll();
      log('Simulação de vendas realizada.');
    } else {
      alert('Erro na simulação de vendas.');
    }
  }

  async function clearData() {
    if (!confirm('Deseja realmente resetar todos os dados e histórico de vendas?')) return;
    const res = await fetch('/clear', { method: 'POST' });
    if (res.ok) {
      await fetchProducts();
      renderAll();
      log('Dados e histórico resetados.');
    } else {
      alert('Erro ao limpar dados.');
    }
  }

  function exportCSV() {
    const rows = [['Nome','Categoria','Qtd','Demanda','Vendidos','Imagem']];
    products.forEach(p => rows.push([p.name, p.category, p.quantity, p.demand, p.sold, p.image]));
    const csv = rows.map(r => r.join(',')).join('\n');
    const a = document.createElement('a');
    a.href = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);
    a.download = 'estoque.csv';
    a.click();
  }

  function importCSV(e) {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = async () => {
      const lines = reader.result.split('\n').slice(1);
      for (const line of lines) {
        if (!line.trim()) continue;
        const [name, category, quantity, demand, sold, image] = line.split(',');
        await saveProduct({
          name: name.trim(),
          category: category.trim(),
          quantity: Number(quantity),
          demand: Number(demand),
          sold: Number(sold),
          image: image.trim()
        });
      }
      importFile.value = '';
      log('CSV importado com sucesso.');
    };
    reader.readAsText(file);
  }

  function resetForm() {
    nameInput.value = '';
    categoryInput.value = '';
    quantityInput.value = '';
    demandInput.value = '';
    imageInput.value = '';
    addBtn.textContent = 'Adicionar';
    cancelBtn.style.display = 'none';
    editIndex = -1;
  }

  function startEdit(i) {
    const p = products[i];
    nameInput.value = p.name;
    categoryInput.value = p.category;
    quantityInput.value = p.quantity;
    demandInput.value = p.demand;
    imageInput.value = p.image;
    addBtn.textContent = 'Salvar';
    cancelBtn.style.display = 'inline-block';
    editIndex = i;
    window.scroll(0, 0);
  }

  function renderTable() {
    const term = searchInput.value.trim().toLowerCase();
    let filtered = products.filter(p =>
      p.name.toLowerCase().includes(term) || p.category.toLowerCase().includes(term)
    );
    if (sortCol) {
      filtered.sort((a, b) => {
        if (a[sortCol] > b[sortCol]) return sortDir;
        if (a[sortCol] < b[sortCol]) return -sortDir;
        return 0;
      });
    }

    tableBody.innerHTML = '';
    filtered.forEach((p, i) => {
      const status = p.quantity === 0 ? 'Esgotado' : p.quantity <= 5 ? 'Baixo' : 'OK';
      const rowClass = p.quantity <= 5 ? 'low-stock' : '';
      tableBody.innerHTML += `
        <tr class="${rowClass}">
          <td><img src="${p.image || 'https://via.placeholder.com/40'}" width="40" alt="Imagem"></td>
          <td>${p.name}</td>
          <td>${p.category}</td>
          <td>${p.quantity}</td>
          <td>${p.demand}%</td>
          <td>${p.sold}</td>
          <td>${status}</td>
          <td>
            <button onclick="startEdit(${products.indexOf(p)})">Editar</button>
            <button onclick="deleteProduct('${p.name.replace(/'/g, "\\'")}')">Excluir</button>
          </td>
        </tr>
      `;
    });
  }

  function renderRanking() {
    const sorted = products.slice().sort((a, b) => b.sold - a.sold);
    rankingEl.innerHTML = sorted.map(p => `<li>${p.name}: ${p.sold}</li>`).join('');
  }

  function renderChart() {
    if (chart) chart.destroy();
    const maxLen = Math.max(...Object.values(history).map(h => h.length));
    const labels = Array.from({ length: maxLen }, (_, i) => i + 1);
    const datasets = products.map((p, i) => ({
      label: p.name,
      data: history[p.name] || [],
      borderColor: `hsl(${(i * 60) % 360}, 70%, 50%)`,
      fill: false,
      tension: 0.3,
    }));
    chart = new Chart(chartCtx, {
      type: 'line',
      data: { labels, datasets },
      options: {
        responsive: true,
        plugins: { legend: { position: 'bottom' } },
        scales: { y: { beginAtZero: true } }
      }
    });
  }

  function renderAll() {
    renderTable();
    renderRanking();
    renderChart();
  }

  // Event listeners
  addBtn.onclick = async () => {
    const name = nameInput.value.trim();
    const category = categoryInput.value;
    const quantity = Number(quantityInput.value);
    const demand = Number(demandInput.value);
    const image = imageInput.value.trim() || 'https://via.placeholder.com/40';

    if (!name) return alert('Preencha o nome');
    if (!category) return alert('Escolha categoria');
    if (isNaN(quantity) || quantity < 0) return alert('Quantidade inválida');
    if (isNaN(demand) || demand < 0 || demand > 100) return alert('Demanda inválida');

    await saveProduct({ name, category, quantity, demand, sold: 0, image }, editIndex);
    resetForm();
  };

  cancelBtn.onclick = () => resetForm();
  simulateBtn.onclick = () => simulateSales();
  exportBtn.onclick = () => exportCSV();
  importFile.onchange = (e) => importCSV(e);
  clearBtn.onclick = () => clearData();
  searchInput.oninput = () => renderTable();

  // Sorting columns by clicking header
  document.querySelectorAll('th[data-col]').forEach(th => {
    th.onclick = () => {
      const col = th.getAttribute('data-col');
      sortDir = (sortCol === col ? -sortDir : 1);
      sortCol = col;
      renderTable();
    };
  });

  // Inicializar
  (async () => {
    await fetchProducts();
    renderAll();
  })();
</script>
</body>
</html>
